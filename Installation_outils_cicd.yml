---
- name: Installer une plateforme CI/CD complète sur Ubuntu
  hosts: localhost
  become: yes
  connection: local

  vars:
    docker_version: "20.10"
    kubectl_version: "1.21.0"
    minikube_version: "v1.25.2"
    terraform_version: "1.0.11"
    jenkins_key_url: "https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key"
    prometheus_version: "2.31.1"
    grafana_version: "8.3.0"
    jenkins_port: 8090
    java_version: "openjdk-11-jre"
    java_home_path: "/usr/lib/jvm/java-11-openjdk-amd64"
    app_bin_path: "/app/bin"
    app_versions_path: "/app/versions"
    slave_user: "jenkins-slave"

  tasks:

    - name: Créer l'utilisateur jenkins-slave
      user:
        name: "{{ slave_user }}"
        shell: /bin/bash
        create_home: yes
        home: "/home/{{ slave_user }}"

    - name: Créer les répertoires /app/bin et /app/versions s'ils n'existent pas
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
        owner: "{{ slave_user }}"
        group: "{{ slave_user }}"
      loop:
        - "{{ app_bin_path }}"
        - "{{ app_versions_path }}"

    - name: Mettre à jour les paquets APT (nécessite des droits élevés)
      apt:
        update_cache: yes
        upgrade: yes

    - name: Installer les paquets de base (nécessite des droits élevés)
      apt:
        name:
          - curl
          - wget
          - git
          - unzip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
          - lsb-release
          - python3
          - python3-pip
        state: present

    - name: Installer Java 11 (nécessite des droits élevés)
      apt:
        name: "{{ java_version }}"
        state: present

    - name: Vérifier que JAVA_HOME est correctement configuré pour Jenkins
      lineinfile:
        path: /etc/default/jenkins
        regexp: '^JAVA_HOME='
        line: 'JAVA_HOME={{ java_home_path }}'
        create: yes

    - name: Ajouter la clé GPG Jenkins de manière sécurisée (nécessite des droits élevés)
      shell: |
        curl -fsSL {{ jenkins_key_url }} | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
      args:
        executable: /bin/bash

    - name: Ajouter le dépôt Jenkins avec la clé signée (nécessite des droits élevés)
      shell: |
        echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
      args:
        executable: /bin/bash

    - name: Mettre à jour les paquets APT après ajout de Jenkins (nécessite des droits élevés)
      apt:
        update_cache: yes

    - name: Installer Jenkins (nécessite des droits élevés)
      apt:
        name: jenkins
        state: present

    - name: Appliquer les permissions correctes aux répertoires Jenkins (nécessite des droits élevés)
      file:
        path: /var/lib/jenkins
        owner: jenkins
        group: jenkins
        recurse: yes
      become: yes

    - name: Assurez-vous que le port Jenkins est configuré correctement
      lineinfile:
        path: /etc/default/jenkins
        regexp: '^HTTP_PORT='
        line: 'HTTP_PORT={{ jenkins_port }}'

    - name: Appliquer les permissions correctes aux répertoires de logs Jenkins (nécessite des droits élevés)
      file:
        path: /var/log/jenkins
        owner: jenkins
        group: jenkins
        recurse: yes

    - name: Démarrer et activer Jenkins (nécessite des droits élevés)
      systemd:
        name: jenkins
        state: restarted
        enabled: yes

    - name: Installer Docker (nécessite des droits élevés)
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
        add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
        apt update
        apt install -y docker-ce docker-ce-cli containerd.io
      args:
        executable: /bin/bash

    - name: Ajouter l'utilisateur jenkins-slave au groupe Docker (nécessite des droits élevés)
      user:
        name: "{{ slave_user }}"
        groups: docker
        append: yes

    # Modifier les permissions des répertoires pour permettre à jenkins-slave d'y écrire
    - name: Appliquer les permissions correctes aux répertoires /app/bin et /app/versions
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ slave_user }}"
        group: "{{ slave_user }}"
        mode: '0755'
      loop:
        - "{{ app_bin_path }}"
        - "{{ app_versions_path }}"
      become: yes

    - name: Installer Docker Compose dans /app/versions et créer un lien symbolique
      become: no
      become_user: "{{ slave_user }}"
      shell: |
        curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o {{ app_versions_path }}/docker-compose-1.29.2
        chmod +x {{ app_versions_path }}/docker-compose-1.29.2
        ln -sf {{ app_versions_path }}/docker-compose-1.29.2 {{ app_bin_path }}/docker-compose
      args:
        executable: /bin/bash

    - name: Installer Kubernetes Kubectl dans /app/versions et créer un lien symbolique
      become: no
      become_user: "{{ slave_user }}"
      shell: |
        curl -L "https://storage.googleapis.com/kubernetes-release/release/v{{ kubectl_version }}/bin/linux/amd64/kubectl" -o {{ app_versions_path }}/kubectl-{{ kubectl_version }}
        chmod +x {{ app_versions_path }}/kubectl-{{ kubectl_version }}
        ln -sf {{ app_versions_path }}/kubectl-{{ kubectl_version }} {{ app_bin_path }}/kubectl
      args:
        executable: /bin/bash

    - name: Installer Minikube dans /app/versions et créer un lien symbolique
      become: no
      become_user: "{{ slave_user }}"
      shell: |
        curl -L "https://storage.googleapis.com/minikube/releases/{{ minikube_version }}/minikube-linux-amd64" -o {{ app_versions_path }}/minikube-{{ minikube_version }}
        chmod +x {{ app_versions_path }}/minikube-{{ minikube_version }}
        ln -sf {{ app_versions_path }}/minikube-{{ minikube_version }} {{ app_bin_path }}/minikube
      args:
        executable: /bin/bash

    - name: Installer Terraform dans /app/versions et créer un lien symbolique
      become: no
      become_user: "{{ slave_user }}"
      shell: |
        wget https://releases.hashicorp.com/terraform/{{ terraform_version }}/terraform_{{ terraform_version }}_linux_amd64.zip
        unzip terraform_{{ terraform_version }}_linux_amd64.zip
        mv terraform {{ app_versions_path }}/terraform-{{ terraform_version }}
        chmod +x {{ app_versions_path }}/terraform-{{ terraform_version }}
        ln -sf {{ app_versions_path }}/terraform-{{ terraform_version }} {{ app_bin_path }}/terraform
        rm terraform_{{ terraform_version }}_linux_amd64.zip
      args:
        executable: /bin/bash

    - name: Installer PostgreSQL (nécessite des droits élevés)
      apt:
        name: postgresql
        state: present

    - name: Installer MySQL (nécessite des droits élevés)
      apt:
        name: mysql-server
        state: present

    - name: Installer Prometheus dans /app/versions et créer un lien symbolique
      become: no
      become_user: "{{ slave_user }}"
      shell: |
        wget https://github.com/prometheus/prometheus/releases/download/v{{ prometheus_version }}/prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
        tar xvf prometheus-{{ prometheus_version }}.linux-amd64.tar.gz
        mv prometheus-{{ prometheus_version }}.linux-amd64/prometheus {{ app_versions_path }}/prometheus-{{ prometheus_version }}
        mv prometheus-{{ prometheus_version }}.linux-amd64/promtool {{ app_versions_path }}/promtool-{{ prometheus_version }}
        chmod +x {{ app_versions_path }}/prometheus-{{ prometheus_version }} {{ app_versions_path }}/promtool-{{ prometheus_version }}
        ln -sf {{ app_versions_path }}/prometheus-{{ prometheus_version }} {{ app_bin_path }}/prometheus
        ln -sf {{ app_versions_path }}/promtool-{{ prometheus_version }} {{ app_bin_path }}/promtool
        rm -rf prometheus-{{ prometheus_version }}.linux-amd64*
      args:
        executable: /bin/bash

    - name: Installer Grafana (nécessite des droits élevés)
      shell: |
        wget https://dl.grafana.com/oss/release/grafana_{{ grafana_version }}_amd64.deb
        dpkg -i grafana_{{ grafana_version }}_amd64.deb
        apt-get install -f -y
      args:
        executable: /bin/bash

    - name: Démarrer et activer Grafana (nécessite des droits élevés)
      systemd:
        name: grafana-server
        state: started
        enabled: yes

    - name: Installer Nginx (nécessite des droits élevés)
      apt:
        name: nginx
        state: present

    - name: Démarrer et activer Nginx (nécessite des droits élevés)
      systemd:
        name: nginx
        state: started
        enabled: yes

    - name: Installer Maven en tant que jenkins-slave
      become: no
      become_user: "{{ slave_user }}"
      apt:
        name: maven
        state: present

    - name: Installer Gradle en tant que jenkins-slave
      become: no
      become_user: "{{ slave_user }}"
      apt:
        name: gradle
        state: present

    - name: Installer d'autres outils DevOps en tant que jenkins-slave
      become: no
      become_user: "{{ slave_user }}"
      apt:
        name:
          - tmux
          - htop
          - tree
        state: present
